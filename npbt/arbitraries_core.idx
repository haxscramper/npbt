getFirst	npbt/arbitraries_core.html#getFirst,Arbitrary[T],int,Random	arbitraries_core: getFirst[T](a: Arbitrary[T]; getN: int = 8; random: Random = newRandom()): seq[T]	
cgfRepeatEnableKinds	npbt/arbitraries_core.html#cgfRepeatEnableKinds	arbitraries_core: cgfRepeatEnableKinds	
cgfRepeatOrderKinds	npbt/arbitraries_core.html#cgfRepeatOrderKinds	arbitraries_core: cgfRepeatOrderKinds	
arbTuple	npbt/arbitraries_core.html#arbTuple,Arbitrary[A]	arbitraries_core: arbTuple[A](a1: Arbitrary[A]): Arbitrary[(A,)]	
arbTuple	npbt/arbitraries_core.html#arbTuple,Arbitrary[A],Arbitrary[B]	arbitraries_core: arbTuple[A, B](a1: Arbitrary[A]; a2: Arbitrary[B]): Arbitrary[(A, B)]	
arbInt	npbt/arbitraries_core.html#arbInt	arbitraries_core: arbInt(): Arbitrary[int]	
arbInt	npbt/arbitraries_core.html#arbInt,int,int	arbitraries_core: arbInt(min, max: int): Arbitrary[int]	
arbuint32	npbt/arbitraries_core.html#arbuint32	arbitraries_core: arbuint32(): Arbitrary[uint32]	
arbuint32	npbt/arbitraries_core.html#arbuint32,uint32,uint32	arbitraries_core: arbuint32(min, max: uint32): Arbitrary[uint32]	
arbSeq	npbt/arbitraries_core.html#arbSeq,Arbitrary[A],Natural,Natural,set[CollectionGenFlags]	arbitraries_core: arbSeq[A](itemArb: Arbitrary[A]; minLen: Natural; maxLen: Natural; flags: set[\n    CollectionGenFlags] = {cgfAllowRepeat, cgfSequentialRepeat}): Arbitrary[\n    seq[A]]	
arbSample	npbt/arbitraries_core.html#arbSample,seq[T]	arbitraries_core: arbSample[T](values: seq[T]): Arbitrary[T]	
arbChar	npbt/arbitraries_core.html#arbChar,set[char]	arbitraries_core: arbChar(chars: set[char]): Arbitrary[char]	
arbChar	npbt/arbitraries_core.html#arbChar,char,char	arbitraries_core: arbChar(min, max: char): Arbitrary[char]	
arbChar	npbt/arbitraries_core.html#arbChar	arbitraries_core: arbChar(): Arbitrary[char]	
arbCharAscii	npbt/arbitraries_core.html#arbCharAscii	arbitraries_core: arbCharAscii(): Arbitrary[char]	
arbSeqOf	npbt/arbitraries_core.html#arbSeqOf,Arbitrary[T],uint32,uint32	arbitraries_core: arbSeqOf[T](a: Arbitrary[T]; min: uint32 = 0; max: uint32 = 100): Arbitrary[\n    seq[T]]	
arbString	npbt/arbitraries_core.html#arbString,uint32,uint32	arbitraries_core: arbString(min: uint32 = 0; max: uint32 = 1000; arbchar = arbChar()): Arbitrary[\n    string]	
arbRune	npbt/arbitraries_core.html#arbRune	arbitraries_core: arbRune(): Arbitrary[Rune]	
arbStringNimIdent	npbt/arbitraries_core.html#arbStringNimIdent,int,bool,bool	arbitraries_core: arbStringNimIdent(idLen: int = 12; repeatNormalized: bool = false;\n                  useUnicode: bool = false): Arbitrary[string]	
arbStringAscii	npbt/arbitraries_core.html#arbStringAscii,uint32,uint32	arbitraries_core: arbStringAscii(min: uint32 = 0; max: uint32 = 1000): Arbitrary[string]	
arbEnum	npbt/arbitraries_core.html#arbEnum,set[T]	arbitraries_core: arbEnum[T: enum](values: set[T] = {low(T) .. high(T)}): Arbitrary[T]	
arbNimNode	npbt/arbitraries_core.html#arbNimNode	arbitraries_core: arbNimNode(): Arbitrary[NimNode]	
